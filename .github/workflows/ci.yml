name: CI

on:
  push:
    branches: ["**"]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              cmake build-essential libfmt-dev libgtest-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            # Avoid reinstalling preinstalled or pinned formulae on GitHub macOS runners
            (brew list cmake >/dev/null 2>&1) || brew install cmake
            (brew list fmt >/dev/null 2>&1) || brew install fmt
            (brew list googletest >/dev/null 2>&1) || brew install googletest
          fi
      - name: Install ccache
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get install -y --no-install-recommends ccache
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            (brew list ccache >/dev/null 2>&1) || brew install ccache
          fi
      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', 'include/**', 'tests/**') }}
      - name: Configure
        run: cmake -S . -B build -DGINT_BUILD_TESTS=ON -DGINT_BUILD_BENCHMARKS=OFF -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      - name: Build
        run: cmake --build build --config Debug --parallel
      - name: Run tests
        run: |
          cd build
          ctest -j 2 --output-on-failure

  build-cxx17:
    name: Build and test (C++17, Ubuntu)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends cmake build-essential libfmt-dev libgtest-dev ccache
      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', 'include/**', 'tests/**') }}
      - name: Configure
        run: cmake -S . -B build -DGINT_BUILD_TESTS=ON -DGINT_BUILD_BENCHMARKS=OFF -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      - name: Build C++17 tests
        run: cmake --build build --target gint_tests_cxx17 --config Debug --parallel
      - name: Run C++17 tests
        run: ./build/gint_tests_cxx17 --gtest_color=yes

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends cmake build-essential \
            libfmt-dev libgtest-dev lcov
      - name: Configure
        run: cmake -S . -B build -DENABLE_COVERAGE=ON -DGINT_BUILD_TESTS=ON -DGINT_BUILD_BENCHMARKS=OFF
      - name: Build
        run: cmake --build build --config Debug --parallel
      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure || true
      - name: Generate coverage
        run: |
          lcov --capture --directory build --output-file coverage.info --ignore-errors mismatch
          lcov --remove coverage.info '/usr/*' '*/tests/*' --output-file coverage.info
          lcov --list coverage.info

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format
      - name: Check code format
        run: |
          FILES=$(git ls-files '*.cpp' '*.hpp' '*.h')
          if [ -n "$FILES" ]; then
            clang-format -i --style=file $FILES
            git diff --exit-code
          fi

  benchmark:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libfmt-dev libbenchmark-dev libboost-dev
      - name: Configure
        run: cmake -S . -B build -DGINT_BUILD_TESTS=OFF -DGINT_BUILD_BENCHMARKS=ON
      - name: Build
        run: cmake --build build --config Release --parallel
      - name: Run benchmarks
        run: |
          build/perf --benchmark_min_time=0.01s
          build/perf_compare_int256 --benchmark_min_time=0.01s
